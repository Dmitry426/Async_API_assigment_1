version: "3.8"

services:
  etl:
    build:
      context: .
      target: development
    env_file:
      - ./.env
    command: [ "python", "-m", "etl"]
    volumes:
      - "./etl:/src/etl"
      - "./etl/config.json:/src/config.json"
    depends_on:
      elastic:
        condition: service_healthy
      postgres:
        condition: service_healthy

  async_server:
    build:
      context: .
      target: development
    image: async_server
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    command: [ "python", "-m", "async_service" ]
    volumes:
      - "./async_service:/src/async_service"
    depends_on:
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:13.0-alpine
    volumes:
      - data_postgres:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DBNAME}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}
      interval: 5s
      timeout: 20s
      retries: 100
    ports:
      - "5432:5432"
    restart: always

  elastic:
    image: elasticsearch:7.7.0
    environment:
      cluster.name: movies-elasticsearch-cluster
      network.host: 0.0.0.0
      bootstrap.memory_lock: "true"
      discovery.type: single-node
    healthcheck:
      test: curl -s http://elastic:9200/_cat/health >/dev/null || exit 1
      interval: 5s
      timeout: 20s
      retries: 100
    volumes:
      - data_es:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    expose:
      - 9200

  redis:
    image: redis:6-alpine
    volumes:
      - data_redis:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 20s
      retries: 2
    restart: always


volumes:
  data_es:
  data_postgres:
  data_redis:

